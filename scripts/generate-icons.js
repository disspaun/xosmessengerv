const fs = require('fs/promises')
const path = require('path')
const crypto = require('crypto')
const prettier = require('prettier')

const input_dir = process.argv.at(-1)

const WORKING_DIR = path.resolve(input_dir)

const SUPPORTED_EXTENSIONS = ['svg']

const HEADER = `
/* ===============================================
this file generated by ${path.basename(__filename)}
for export all images and icons with extensions: ${SUPPORTED_EXTENSIONS}
included in ${input_dir}
=============================================== */
`

const prettierConfigPromise = prettier.resolveConfigFile().then(async (filePath) => {
  if (filePath) {
    const config = await prettier.resolveConfig(filePath)
    return config || undefined
  }
})

const toCamel = (str) => {
  return str.replace(/[-\s]([a-z])/g, (g) => g[1].toUpperCase()).replace(/^[a-z]/, (g) => g.toLowerCase())
}

const getHash = (salt) => {
  const hash = crypto.createHash('sha256')
  hash.update(String(salt))
  return hash.digest('hex').slice(0, 6)
}

const imported = []
const exported = {}
/**
 * @param {string[]} files
 */
const getImportsExports = async (files, hash = '') => {
  hash = hash ? '_' + hash : ''

  files.forEach((file) => {
    const ext = file.split('.').pop()
    if (ext && SUPPORTED_EXTENSIONS.includes(ext)) {
      exported[ext] = exported[ext] || {}

      const relativePath = path.relative(WORKING_DIR, file)
      const importNameShort = toCamel(path.basename(file, `.${ext}`))
      const importNameLong = importNameShort + hash

      imported.push(`import ${importNameLong} from './${relativePath}'`)

      let ref = exported[ext]
      for (const part of relativePath.split('/').slice(0, -1)) {
        ref[part] = ref[part] || {}
        ref = ref[part]
      }
      ref[importNameShort] = importNameLong
    }
  })
}

/**
 * @param {string} dir
 */
const handleDirectory = async (dir, deep = 0) => {
  const files = (await fs.readdir(dir)).map((f) => path.join(dir, f))
  await getImportsExports(files, deep ? getHash(deep) : '')

  for (const filePath of files) {
    if ((await fs.stat(filePath)).isDirectory()) {
      await handleDirectory(filePath, deep + 1)
    }
  }
}

Promise.resolve().then(async () => {
  if (!WORKING_DIR || !(await fs.stat(WORKING_DIR)).isDirectory()) {
    console.error('Please provide a valid directory')
    process.exit(1)
  }

  await handleDirectory(WORKING_DIR)

  const content = `${HEADER}\n${imported.join('\n')}\nexport const Icons = ${printObject(exported)}`

  const prettierConfig = await prettierConfigPromise

  // const result = prettier.format(content, prettierConfig)

  await fs.writeFile(path.join(WORKING_DIR, '/index.js'), content)
})

function printObject(object) {
  const result = []
  for (const [k, v] of Object.entries(object)) {
    if (typeof v === 'string') {
      result.push(k === v ? k : `${k}: ${v}`)
    } else {
      result.push(`${k}: ${printObject(v)}`)
    }
  }
  return `{\n${result.join(',\n')}\n}`
}
